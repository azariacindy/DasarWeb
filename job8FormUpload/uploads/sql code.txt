-- question 1
SELECT 
    productid,
    productname,
    supplierid,
    unitprice,
    discontinued
FROM 
    Production.Products
WHERE 
    categoryid = 1;

-- question 2
CREATE VIEW Production.ProductsBeverages AS
SELECT 
    productid,
    productname,
    supplierid,
    unitprice,
    discontinued
FROM 
    Production.Products
WHERE 
    categoryid = 1;

-- question 3
SELECT 
    productid,
    productname
FROM 
    Production.Products
WHERE 
    supplierid = 1;

-- question 7
ALTER VIEW Production.ProductsBeverages AS 
SELECT
    ProductID, 
    ProductName, 
    SupplierID, 
    UnitPrice, 
    Discontinued, 
    CASE 
        WHEN UnitPrice > 100 THEN N'high' 
        ELSE N'normal' 
    END AS PriceCategory -- Provide an alias for the CASE expression
FROM 
    Production.Products 
WHERE 
    CategoryID = 1;

-- question 8
SELECT 
    p.productid, 
    p.productname
FROM 
    (  
        SELECT
            productid,
            productname,
            supplierid,
            unitprice,
            discontinued,
            CASE 
                WHEN unitprice > 100 THEN N'high' 
                ELSE N'normal' 
            END AS pricetype
        FROM 
            Production.Products
        WHERE 
            CategoryID = 1
    ) AS p 
WHERE 
    p.pricetype = 'high'; -- Filter for PriceType 'high'


-- question 9
SELECT 
    order_totals.custid, 
    SUM(order_totals.TotalOrderAmount) AS TotalSalesAmount, 
    AVG(order_totals.TotalOrderAmount) AS AvgSalesAmount
FROM 
    (   
        SELECT 
            o.orderid,
            o.custid, 
            SUM(od.qty * od.unitprice) AS TotalOrderAmount
        FROM 
            Sales.Orders o
        JOIN 
            Sales.OrderDetails od ON o.orderid = od.orderid
        GROUP BY 
            o.orderid, o.custid
    ) AS order_totals
GROUP BY 
    order_totals.custid;

-- question 10
WITH SalesByYear AS (
    SELECT 
        YEAR(o.orderdate) AS OrderYear, 
        SUM(od.qty * od.unitprice) AS CurTotalSales
    FROM 
        Sales.Orders o
    JOIN 
        Sales.OrderDetails od ON o.orderid = od.orderid
    GROUP BY 
        YEAR(o.orderdate)
)
SELECT 
    cur.OrderYear, 
    cur.CurTotalSales, 
    prev.CurTotalSales AS PrevTotalSales, 
    CASE 
        WHEN prev.CurTotalSales = 0 OR prev.CurTotalSales IS NULL THEN 0 
        ELSE ((cur.CurTotalSales - prev.CurTotalSales) / prev.CurTotalSales) * 100 
    END AS PercentGrowth
FROM 
    SalesByYear cur
LEFT JOIN 
    SalesByYear prev ON cur.OrderYear = prev.OrderYear + 1
ORDER BY 
    cur.OrderYear;

-- question 11
SELECT 
	p.productid,
	p.productname
FROM
(
	SELECT 
		productid,
		productname,
		CASE WHEN unitprice > 100 THEN N'high' ELSE N'normal' END AS pricetype
	FROM
		Production.Products
	WHEN categoryid = 1
) AS p
WHEN p.pricetype = 'high';

-- question 12
WITH c2008 AS
(
    SELECT
        custid,
        SUM(val) AS salesamt2008
    FROM
        Sales.OrderValues
    WHERE
        YEAR(orderdate) = 2008
    GROUP BY
        custid
)
SELECT
    c2008.custid,
    customers.contactname,
    c2008.salesamt2008
FROM
    c2008
INNER JOIN
    Sales.Customers AS customers
ON
    c2008.custid = customers.custid

-- question 13
WITH c2008 AS (
    SELECT 
        custid, 
        SUM(val) AS salesamt2008
    FROM 
        Sales.OrderValues
    WHERE 
        YEAR(orderdate) = 2008
    GROUP BY 
        custid
),

c2007 AS (
    SELECT 
        custid, 
        SUM(val) AS salesamt2007
    FROM 
        Sales.OrderValues
    WHERE 
        YEAR(orderdate) = 2007
    GROUP BY 
        custid
)

SELECT 
    cust.custid, 
    cust.contactname, 
    ISNULL(c08.salesamt2008, 0) AS salesamt2008, 
    ISNULL(c07.salesamt2007, 0) AS salesamt2007, 
    ISNULL(
        CASE 
            WHEN c07.salesamt2007 = 0 THEN 0
            ELSE ((c08.salesamt2008 - c07.salesamt2007) / c07.salesamt2007) * 100
        END, 0
    ) AS percentgrowth
FROM 
    Sales.Customers cust
LEFT JOIN 
    c2008 c08 ON cust.custid = c08.custid
LEFT JOIN 
    c2007 c07 ON cust.custid = c07.custid
ORDER BY 
    percentgrowth DESC;

-- question 14
SELECT 
    custid, 
    SUM(val) AS totalsalesamount
FROM 
    Sales.OrderValues
WHERE 
    YEAR(orderdate) = 2007
GROUP BY 
    custid;

-- question 15
CREATE FUNCTION dbo.fnGetSalesByCustomer (@orderyear INT) 
RETURNS TABLE
AS
RETURN
(
    SELECT 
        custid, 
        SUM(val) AS totalsalesamount
    FROM 
        Sales.OrderValues
    WHERE 
        YEAR(orderdate) = @orderyear
    GROUP BY 
        custid
);

-- question 17
SELECT 
    custid, 
    totalsalesamount
FROM 
    dbo.fnGetSalesByCustomer(2007);

-- question 18
SELECT TOP 3
    p.productid,
    p.productname,
    SUM(od.qty * od.unitprice) AS totalsalesamount
FROM 
    Sales.OrderDetails od
JOIN 
    Sales.Orders o ON od.orderid = o.orderid
JOIN 
    Production.Products p ON od.productid = p.productid
WHERE 
    o.custid = 1  -- Filter for customer ID = 1
GROUP BY 
    p.productid, 
    p.productname
ORDER BY 
    totalsalesamount DESC; 

-- question 19
CREATE FUNCTION dbo.fnGetTop3ProductsForCustomer (@custid INT) 
RETURNS TABLE
AS 
RETURN
(
    SELECT TOP 3
        p.productid,
        p.productname,
        SUM(od.qty * od.unitprice) AS totalsalesamount
    FROM 
        Sales.OrderDetails od
    JOIN 
        Sales.Orders o ON od.orderid = o.orderid
    JOIN 
        Production.Products p ON od.productid = p.productid
    WHERE 
        o.custid = @custid 
    GROUP BY 
        p.productid, 
        p.productname
    ORDER BY 
        totalsalesamount DESC 
);

-- question 20
SELECT 
    p.productid, 
    p.productname, 
    p.totalsalesamount
FROM 
    dbo.fnGetTop3ProductsForCustomer(1) AS p; 

